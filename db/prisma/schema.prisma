generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            Int       @id @default(autoincrement())
  email         String?   @unique
  emailVerified Boolean?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profiles      Profile[]
}

model Profile {
  id                     Int              @id @default(autoincrement())
  user                   User             @relation(fields: [userId], references: [id])
  userId                 Int
  username               String           @unique
  isPrivate              Boolean          @default(false)
  bio                    String?          @db.Text
  image                  String?
  followers              Follow[]         @relation("Follows")
  following              Follow[]         @relation("Following")
  crates                 Crate[]          @relation("CreatedByProfile")
  favorites              Crate[]          @relation("FavoritedByProfile")
  socialLinks            SocialLink[]
  followRequestsSent     FollowRequest[]  @relation("FollowRequestSent")
  followRequestsReceived FollowRequest[]  @relation("FollowRequestReceived")
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  searchAndSelectCount   Int              @default(0)
  recommendations        Recommendation[]

  @@index([userId])
}

model Crate {
  id                   Int              @id @default(autoincrement())
  title                String
  description          String?          @db.Text
  creator              Profile          @relation("CreatedByProfile", fields: [creatorId], references: [id])
  creatorId            Int
  favoritedBy          Profile[]        @relation("FavoritedByProfile")
  labels               Label[]
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  isRanked             Boolean          @default(false)
  albums               CrateAlbum[]
  searchAndSelectCount Int              @default(0)
  recommendedIn        Recommendation[]

  @@index([creatorId])
}

model Follow {
  id          Int      @id @default(autoincrement())
  follower    Profile  @relation("Follows", fields: [followerId], references: [id])
  followerId  Int
  following   Profile  @relation("Following", fields: [followingId], references: [id])
  followingId Int
  createdAt   DateTime @default(now())

  @@index([followerId])
  @@index([followingId])
}

model SocialLink {
  id        Int     @id @default(autoincrement())
  platform  String
  username  String
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int

  @@index([profileId])
}

model FollowRequest {
  id            Int      @id @default(autoincrement())
  sender        Profile  @relation("FollowRequestSent", fields: [senderId], references: [id])
  senderId      Int
  receiver      Profile  @relation("FollowRequestReceived", fields: [receiverId], references: [id])
  receiverId    Int
  requestStatus String
  sentAt        DateTime @default(now())

  @@index([senderId])
  @@index([receiverId])
}

model Album {
  id                   Int             @id @default(autoincrement())
  discogsMasterId      Int             @unique
  title                String          @db.Text
  artist               String
  label                String          @db.Text
  releaseYear          Int?
  genres               Genre[]
  subgenres            Subgenre[]
  imageUrl             String          @default("")
  crates               CrateAlbum[]
  tracklist            TracklistItem[]
  searchAndSelectCount Int             @default(0)

  @@fulltext([title, artist])
}

model Genre {
  id        Int        @id @default(autoincrement())
  name      String
  albums    Album[]
  subgenres Subgenre[]
}

model Subgenre {
  id            Int     @id @default(autoincrement())
  name          String
  albums        Album[]
  parentGenre   Genre   @relation(fields: [parentGenreId], references: [id])
  parentGenreId Int

  @@index([parentGenreId])
}

model TracklistItem {
  id      Int    @id @default(autoincrement())
  title   String @db.Text
  order   Int
  album   Album  @relation(fields: [albumId], references: [id])
  albumId Int

  @@index([albumId])
}

model CrateAlbum {
  id      Int   @id @default(autoincrement())
  crate   Crate @relation(fields: [crateId], references: [id])
  crateId Int
  album   Album @relation(fields: [albumId], references: [id])
  albumId Int
  rank    Int?  @default(0)
  tags    Tag[]

  @@index([crateId])
  @@index([albumId])
}

model Label {
  id                   Int     @id @default(autoincrement())
  name                 String
  isStandard           Boolean
  crates               Crate[]
  searchAndSelectCount Int     @default(0)

  @@fulltext([name])
}

model Tag {
  id                   Int          @id @default(autoincrement())
  name                 String
  crateAlbum           CrateAlbum[]
  searchAndSelectCount Int          @default(0)

  @@fulltext([name])
}

model CronJob {
  id         Int       @id @default(autoincrement())
  scriptName String    @unique
  path       String
  runs       CronRun[]
}

model CronRun {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  completedAt        DateTime?
  lastProcessedLabel String?
  cronJob            CronJob   @relation(fields: [cronJobId], references: [id])
  cronJobId          Int

  @@index([cronJobId])
}

model SelectedSearchResult {
  id           Int    @id @default(autoincrement())
  searchTerm   String
  searchResult String
  resultType   String
  selectedId   Int
}

model Recommendation {
  id        Int      @id @default(autoincrement())
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId Int
  crate     Crate    @relation(fields: [crateId], references: [id])
  crateId   Int
  seen      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([crateId])
}
