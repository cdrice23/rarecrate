### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Album {
  artist: String!
  crates: CrateAlbum
  discogsMasterId: Int!
  genres: [Genre]
  id: Int!
  imageUrl: String!
  label: String!
  releaseYear: Int
  searchAndSelectCount: Int!
  subgenres: [Subgenre]
  title: String!
  tracklist: [TracklistItem]
}

type Crate {
  albums: [CrateAlbum]
  createdAt: DateTime!
  creator: Profile
  creatorId: Int!
  description: String
  favoritedBy: [Profile]
  id: Int!
  isRanked: Boolean!
  labels: [Label]
  recommendedIn: [Recommendation]
  searchAndSelectCount: Int!
  title: String!
  updatedAt: DateTime!
}

type CrateAlbum {
  album: Album
  albumId: Int!
  crate: Crate
  crateId: Int!
  id: Int!
  rank: Int
  tags: [Tag]
}

input CrateAlbumInput {
  albumId: Int!
  order: Int
  tagIds: [Int]
}

input CrateInput {
  crateAlbums: [CrateAlbumInput]!
  creatorId: Int!
  description: String!
  isRanked: Boolean!
  labelIds: [Int]
  title: String!
}

input CrateProfileInput {
  crateId: Int!
  profileId: Int!
}

type CronJob {
  id: Int!
  path: String!
  runs: [CronRun]
  scriptName: String!
}

type CronRun {
  completedAt: DateTime!
  createdAt: DateTime!
  cronJob: CronJob
  cronJobId: Int!
  id: Int!
  lastProcessedLabel: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Follow {
  createdAt: DateTime!
  follower: Profile
  followerId: Int!
  following: Profile
  followingId: Int!
  id: Int!
}

type FollowAndOrRequest {
  follow: Follow
  followRequest: FollowRequest
}

input FollowOrRequestInput {
  follower: Int!
  following: Int!
  followingIsPrivate: Boolean
  requestStatus: RequestStatus
}

type FollowRequest {
  id: Int!
  receiver: Profile
  receiverId: Int!
  requestStatus: RequestStatus
  sender: Profile
  senderId: Int!
  sentAt: DateTime!
}

type Genre {
  albums: Album
  id: Int!
  name: String!
  searchAndSelectCount: Int!
  subgenres: Subgenre
}

type Label {
  crates: [Crate]
  id: Int!
  isStandard: Boolean!
  name: String!
  searchAndSelectCount: Int!
}

type Mutation {
  acceptFollowRequest(input: FollowOrRequestInput!): FollowAndOrRequest
  addCrateToFavorites(input: CrateProfileInput!): Crate
  addNewAlbum(discogsMasterId: Int!): Album
  addNewCrate(input: CrateInput!): Crate
  addNewLabel(name: String!): Label
  addNewTag(name: String!): Tag
  createNewFollowOrRequest(input: FollowOrRequestInput!): FollowAndOrRequest
  rejectFollowRequest(input: FollowOrRequestInput!): FollowRequest
  removeCrateFromFavorites(input: CrateProfileInput!): Crate
  unfollowProfile(input: FollowOrRequestInput!): Follow
}

type Profile {
  bio: String
  crates: [Crate]
  createdAt: DateTime!
  favorites: [Crate]
  followRequestsReceived: [FollowRequest]
  followRequestsSent: [FollowRequest]
  followers: [Profile]
  following: [Profile]
  id: Int!
  image: String
  isPrivate: Boolean!
  recommendations: [Recommendation]
  searchAndSelectCount: Int!
  socialLinks: [SocialLink]
  updatedAt: DateTime!
  user: User
  userId: Int!
  username: String!
}

type Query {
  getCrateDetailWithAlbums(id: Int!): Crate!
  getPendingFollowRequests(id: Int!): [FollowRequest]!
  getProfile(id: Int, username: String): Profile!
  getTopLabels(includeStandard: Boolean, quantity: Int): [Label]
  getTopTags(quantity: Int): [Tag]
  getUsernameById(userId: Int!): [Profile!]!
  qsAlbums(searchTerm: String!): [Album]!
  qsCrates(searchTerm: String!): [Crate]!
  qsGenres(searchTerm: String!): [Genre]!
  qsLabels(searchTerm: String!): [Label]!
  qsProfiles(searchTerm: String!): [Profile]!
  qsSubgenres(searchTerm: String!): [Subgenre]!
  qsTags(searchTerm: String!): [Tag]!
  searchLabelsById(labelId: Int!): Label!
  searchLabelsByName(searchTerm: String!): [Label]!
  searchPrismaAlbumsById(albumId: Int!): Album!
  searchPrismaAlbumsByName(searchTerm: String!): [Album]!
  searchTagsById(tagId: Int!): Tag!
  searchTagsByName(searchTerm: String!): [Tag]!
}

type Recommendation {
  crate: Crate
  crateId: Int!
  id: Int!
  profile: Profile
  profileId: Int!
  seen: Boolean!
}

enum RequestStatus {
  ACCEPTED
  PENDING
  REJECTED
}

type SelectedSearchResult {
  id: Int!
  resultType: String!
  searchResult: String!
  searchTerm: String!
  selectedId: Int!
}

type SocialLink {
  id: Int!
  platform: String!
  profile: Profile
  profileId: Int!
  username: String!
}

type Subgenre {
  albums: Album
  id: Int!
  name: String!
  parentGenre: Genre
  parentGenreId: Int!
  searchAndSelectCount: Int!
}

type Tag {
  crateAlbum: [CrateAlbum]
  id: Int!
  name: String!
  searchAndSelectCount: Int!
}

type TracklistItem {
  album: Album
  albumId: Int!
  id: Int!
  order: Int!
  title: String!
}

type User {
  createdAt: DateTime!
  email: String
  emailVerified: Boolean
  id: Int!
  profiles: Profile
  role: String!
  updatedAt: DateTime!
}